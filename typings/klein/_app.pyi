"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import (
    IO,
    Any,
    Awaitable,
    Callable,
    Dict,
    Iterator,
    List,
    Mapping,
    Optional,
    Tuple,
    Type,
    Union,
    overload,
)

from zope.interface import implementer

from twisted.python.failure import Failure
from twisted.web.iweb import IRenderable, IRequest
from twisted.web.resource import IResource
from twisted.web.server import Request
from werkzeug.routing import Map, MapAdapter

from ._interfaces import IKleinRequest, KleinQueryValue
from ._resource import KleinResource

"""
Applications are great.  Lets have more of them.
"""
KleinSynchronousRenderable = Union[str, bytes, IResource, IRenderable]
KleinRenderable = Union[
    KleinSynchronousRenderable, Awaitable[KleinSynchronousRenderable]
]

class KleinRouteFunction(Protocol):
    def __call__(_self, request: IRequest) -> KleinRenderable:
        """
        Function that, when decorated by L{Klein.route}, handles a Klein
        request.
        """
        ...

class KleinRouteMethod(Protocol):
    def __call__(_self, self: Any, request: IRequest) -> KleinRenderable:
        """
        Method that, when decorated by L{Klein.route}, handles a Klein
        request.
        """
        ...

class KleinErrorFunction(Protocol):
    def __call__(_self, request: IRequest, failure: Failure) -> KleinRenderable:
        """
        Function that, when registered with L{Klein.handle_errors}, handles
        errors raised during request routing.
        """
        ...

class KleinErrorMethod(Protocol):
    def __call__(
        _self, self: Optional[Klein], request: IRequest, failure: Failure
    ) -> KleinRenderable:
        """
        Method that, when registered with L{Klein.handle_errors}, handles
        errors raised during request routing.
        """
        ...

KleinRouteHandler = Union[KleinRouteFunction, KleinRouteMethod]
KleinErrorHandler = Union[KleinErrorFunction, KleinErrorMethod]

def buildURL(
    mapper: MapAdapter,
    endpoint: str,
    values: Optional[Mapping[str, KleinQueryValue]] = ...,
    method: Optional[str] = ...,
    force_external: bool = ...,
    append_unknown: bool = ...,
) -> str: ...
@implementer(IKleinRequest)
class KleinRequest:
    def __init__(self, request: Request) -> None: ...
    def url_for(
        self,
        endpoint: str,
        values: Optional[Mapping[str, KleinQueryValue]] = ...,
        method: Optional[str] = ...,
        force_external: bool = ...,
        append_unknown: bool = ...,
    ) -> str: ...

ErrorHandlers = List[Tuple[List[Type[Exception]], KleinErrorHandler]]

class Klein:
    """
    L{Klein} is an object which is responsible for maintaining the routing
    configuration of our application.

    @ivar _url_map: A C{werkzeug.routing.Map} object which will be used for
        routing resolution.
    @ivar _endpoints: A C{dict} mapping endpoint names to handler functions.
    """

    _subroute_segments = ...
    def __init__(self) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    @property
    def url_map(self) -> Map:
        """
        Read only property exposing L{Klein._url_map}.
        """
        ...
    @property
    def endpoints(self) -> Dict[str, KleinRouteHandler]:
        """
        Read only property exposing L{Klein._endpoints}.
        """
        ...
    def execute_endpoint(
        self, endpoint: str, request: IRequest, *args: Any, **kwargs: Any
    ) -> KleinRenderable:
        """
        Execute the named endpoint with all arguments and possibly a bound
        instance.
        """
        ...
    def execute_error_handler(
        self, handler: KleinErrorMethod, request: IRequest, failure: Failure
    ) -> KleinRenderable:
        """
        Execute the passed error handler, possibly with a bound instance.
        """
        ...
    def resource(self) -> KleinResource:
        """
        Return an L{IResource} which suitably wraps this app.

        @returns: An L{IResource}
        """
        ...
    def __get__(self, instance: Any, owner: object) -> Klein:
        """
        Get an instance of L{Klein} bound to C{instance}.
        """
        ...
    def route(
        self, url: str, *args: Any, **kwargs: Any
    ) -> Callable[[KleinRouteHandler], KleinRouteHandler]:
        """
        Add a new handler for C{url} passing C{args} and C{kwargs} directly to
        C{werkzeug.routing.Rule}.  The handler function will be passed at least
        one argument an L{twisted.web.server.Request} and any keyword arguments
        taken from the C{url} pattern.

        ::
            @app.route("/")
            def index(request):
                return "Hello"

        @param url: A werkzeug URL pattern given to C{werkzeug.routing.Rule}.
        @param branch: A bool indiciated if a branch endpoint should
            be added that allows all child path segments that don't
            match some other route to be consumed.  Default C{False}.

        @returns: decorated handler function.
        """
        ...
    @contextmanager
    def subroute(self, prefix: str) -> Iterator[Klein]:
        """
        Within this block, C{@route} adds rules to a
        C{werkzeug.routing.Submount}.

        This is implemented by tinkering with the instance's C{_url_map}
        variable. A context manager allows us to gracefully use the pattern of
        "change a variable, do some things with the new value, then put it back
        to how it was before.

        Named "subroute" to try and give callers a better idea of its
        relationship to C{@route}.

        Usage:
        ::
            with app.subroute("/prefix") as app:
                @app.route("/foo")
                def foo_handler(request):
                    return 'I respond to /prefix/foo'

        @param prefix: The string that will be prepended to the paths of all
                       routes established during the with-block.
        """

        class SubmountMap: ...

    @overload
    def handle_errors(
        self, f_or_exception: KleinErrorHandler, *additional_exceptions: Type[Exception]
    ) -> Callable[[KleinErrorHandler], Callable]: ...
    @overload
    def handle_errors(
        self, f_or_exception: Type[Exception], *additional_exceptions: Type[Exception]
    ) -> Callable[[KleinErrorHandler], Callable]: ...
    def handle_errors(
        self,
        f_or_exception: Union[KleinErrorHandler, Type[Exception]],
        *additional_exceptions: Type[Exception],
    ) -> Callable[[KleinErrorHandler], Callable]:
        """
        Register an error handler. This decorator supports two syntaxes. The
        simpler of these can be used to register a handler for all C{Exception}
        types::

            @app.handle_errors
            def error_handler(request, failure):
                request.setResponseCode(500)
                return 'Uh oh'

        Alternately, a handler can be registered for one or more specific
        C{Exception} types::

            @app.handle_errors(EncodingError, ValidationError):
            def error_handler(request, failure)
                request.setResponseCode(400)
                return failure.getTraceback()

        The handler will be passed a L{twisted.web.server.Request} as well as a
        L{twisted.python.failure.Failure} instance. Error handlers may return a
        deferred, a failure or a response body.

        If more than one error handler is registered, the handlers will be
        executed in the order in which they are defined, until a handler is
        encountered which completes successfully. If no handler completes
        successfully, L{twisted.web.server.Request}'s processingFailed() method
        will be called.

        In addition to handling errors that occur within a L{KleinRouteHandler},
        error handlers also handle any L{werkzeug.exceptions.HTTPException}
        which is raised during request routing.

        In particular, C{werkzeug.exceptions.NotFound} will be raised if no
        matching route is found, so to return a custom 404 users can do the
        following::

            @app.handle_errors(NotFound)
            def error_handler(request, failure):
                request.setResponseCode(404)
                return 'Not found'

        @param f_or_exception: An error handler function, or an C{Exception}
            subclass to scope the decorated handler to.
        @param additional_exceptions: Additional C{Exception} subclasses to
            scope the decorated function to.

        @returns: decorated error handler function.
        """
        ...
    def urlFor(
        self,
        request: IRequest,
        endpoint: str,
        values: Optional[Mapping[str, KleinQueryValue]] = ...,
        method: Optional[str] = ...,
        force_external: bool = ...,
        append_unknown: bool = ...,
    ) -> str: ...

    url_for = ...
    def run(
        self,
        host: Optional[str] = ...,
        port: Optional[int] = ...,
        logFile: Optional[IO] = ...,
        endpoint_description: Optional[str] = ...,
        displayTracebacks: bool = ...,
    ) -> None:
        """
        Run a minimal twisted.web server on the specified C{port}, bound to the
        interface specified by C{host} and logging to C{logFile}.

        This function will run the default reactor for your platform and so
        will block the main thread of your application.  It should be the last
        thing your klein application does.

        @param host: The hostname or IP address to bind the listening socket
            to.  "0.0.0.0" will allow you to listen on all interfaces, and
            "127.0.0.1" will allow you to listen on just the loopback
            interface.

        @param port: The TCP port to accept HTTP requests on.

        @param logFile: The file object to log to, by default C{sys.stdout}

        @param endpoint_description: specification of endpoint. Must contain
             protocol, port and interface. May contain other optional arguments,
             e.g. to use SSL: "ssl:443:privateKey=key.pem:certKey=crt.pem"

        @param displayTracebacks: Weather a processing error will result in
            a page displaying the traceback with debugging information or not.
        """
        ...

_globalKleinApp = ...
route = ...
run = ...
subroute = ...
resource = ...
handle_errors = ...
urlFor = ...
