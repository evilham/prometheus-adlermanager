"""
This type stub file was generated by pyright.
"""

from typing import AnyStr, Iterable, Tuple, Union

from zope.interface import implementer

from attr import attrs

from ._imessage import (
    IHTTPHeaders,
    IMutableHTTPHeaders,
    MutableRawHeaders,
    RawHeader,
    RawHeaders,
)

"""
HTTP headers API.
"""
__all__ = ()
String = Union[bytes, str]
HEADER_NAME_ENCODING = ...
HEADER_VALUE_ENCODING = ...

def headerNameAsBytes(name: String) -> bytes:
    """
    Convert a header name to bytes if necessary.
    """
    ...

def headerNameAsText(name: String) -> str:
    """
    Convert a header name to str if necessary.
    """
    ...

def headerValueAsBytes(value: String) -> bytes:
    """
    Convert a header value to bytes if necessary.
    """
    ...

def headerValueAsText(value: String) -> str:
    """
    Convert a header value to str if necessary.
    """
    ...

def normalizeHeaderName(name: AnyStr) -> AnyStr:
    """
    Normalize a header name.
    """
    ...

def normalizeRawHeaders(
    headerPairs: Iterable[Iterable[String]],
) -> Iterable[RawHeader]: ...
def normalizeRawHeadersFrozen(headerPairs: Iterable[Iterable[bytes]]) -> RawHeaders: ...
def normalizeRawHeadersMutable(
    headerPairs: Iterable[Iterable[bytes]],
) -> MutableRawHeaders: ...
def getFromRawHeaders(rawHeaders: RawHeaders, name: AnyStr) -> Iterable[AnyStr]:
    """
    Get a value from raw headers.
    """
    ...

def rawHeaderName(name: String) -> bytes: ...
def rawHeaderNameAndValue(name: String, value: String) -> Tuple[bytes, bytes]: ...
@implementer(IHTTPHeaders)
@attrs(frozen=True)
class FrozenHTTPHeaders:
    """
    Immutable HTTP entity headers.
    """

    rawHeaders: RawHeaders = ...
    def getValues(self, name: AnyStr) -> Iterable[AnyStr]: ...

@implementer(IMutableHTTPHeaders)
@attrs(frozen=True)
class MutableHTTPHeaders:
    """
    Mutable HTTP entity headers.
    """

    _rawHeaders: MutableRawHeaders = ...
    @property
    def rawHeaders(self) -> RawHeaders: ...
    def getValues(self, name: AnyStr) -> Iterable[AnyStr]: ...
    def remove(self, name: String) -> None: ...
    def addValue(self, name: AnyStr, value: AnyStr) -> None: ...
