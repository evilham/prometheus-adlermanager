"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Generator, List, Tuple

import attr
from twisted.internet.defer import inlineCallbacks
from twisted.web.template import Element

"""
Templating wrapper support for Klein.
"""
StackType = List[Tuple[Any, Callable[[Any], None]]]
ATOM_TYPES = ...

@inlineCallbacks
def resolveDeferredObjects(root: Any) -> Generator[Any, object, Any]:
    """
    Wait on possibly nested L{Deferred}s that represent a JSON
    serializable object.

    @param root: JSON-serializable object that may contain
        L{Deferred}s that resolve to JSON-serializable objects, or a
        L{Deferred} that resolves to one.

    @return: A L{Deferred} that fires with a L{Deferred}-free version
        of C{root}, or that fails with the first exception
        encountered.
    """
    ...

class PlatedElement(Element):
    """
    The element type returned by L{Plating}.  This contains several utility
    renderers.
    """

    def __init__(
        self, slot_data, preloaded, boundInstance, presentationSlots, renderers
    ) -> None:
        """
        @param slot_data: A dictionary mapping names to values.

        @param preloaded: The pre-loaded data.
        """
        ...
    def lookupRenderMethod(
        self, name
    ):  # -> ((request: IRequest, tag: Tag, *args: Any, **kw: Any) -> Any) | ((request: Unknown, tag: Unknown) -> Generator[Unknown, None, None]):
        """
        @return: a renderer.
        """
        ...

class Plating:
    """
    A L{Plating} is a container which can be used to generate HTML from data.

    Its name is derived both from tem-I{plating} and I{chrome plating}.
    """

    CONTENT = ...
    def __init__(self, defaults=..., tags=..., presentation_slots=...) -> None:
        """ """
        ...
    def renderMethod(self, renderer):
        """
        Add a render method to this L{Plating} object that can be used in the
        top-level template.

        The name of the renderer to use within the template is the name of the
        decorated function.
        """
        ...
    def routed(self, routing, tags):  # -> (method: Unknown) -> Unknown:
        """ """
        ...
    @attr.s(auto_attribs=True)
    class _Widget:
        """
        Implementation of L{Plating.widgeted}.  This is a L{callable}
        descriptor that records the instance to which its wrapped
        function is bound, if any.  Its L{widget} method then passes
        that instance or L{None} and the result of invoking the
        function (or now bound method) to the creating L{Plating}
        instance's L{Plating._elementify} to construct a
        L{PlatedElement}.
        """

        _plating: Plating
        _function: Callable[..., Any]
        _instance: object
        def __call__(self, *args, **kwargs): ...
        def __get__(self, instance, owner=...): ...
        def widget(self, *args, **kwargs):  # -> PlatedElement:
            """
            Construct a L{PlatedElement} the rendering of this widget.
            """
            ...
        def __getattr__(self, attr): ...

    def widgeted(self, function):  # -> _Widget:
        """
        A decorator that turns a function into a renderer for an
        element without a L{Klein.route}.  Use this to create reusable
        template elements.
        """
        ...
