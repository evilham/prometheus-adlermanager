"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Generator, List, Sequence, Type

from zope.interface import Interface, implementer

import attr
from twisted.internet.defer import inlineCallbacks
from twisted.web.iweb import IRequest

from .interfaces import IRequestLifecycle, IRequiredParameter

@implementer(IRequestLifecycle)
@attr.s(auto_attribs=True)
class RequestLifecycle:
    """
    Mechanism to run hooks at the start of a request managed by a L{Requirer}.
    """

    _prepareHooks: List = ...
    def addPrepareHook(
        self,
        beforeHook: Callable,
        requires: Sequence[Type[Interface]] = ...,
        provides: Sequence[Type[Interface]] = ...,
    ) -> None: ...
    @inlineCallbacks
    def runPrepareHooks(
        self, instance: Any, request: IRequest
    ) -> Generator[Any, object, None]:
        """
        Execute all the hooks added with L{RequestLifecycle.addPrepareHook}.
        This is invoked by the L{requires} route machinery.

        @param instance: The instance bound to the Klein route.

        @param request: The IRequest being processed.
        """
        ...

_routeDecorator = Any
_routeT = Any
_prerequisiteCallback = Callable[[IRequestLifecycle], None]

@attr.s(auto_attribs=True)
class Requirer:
    """
    Dependency injection for required parameters.
    """

    _prerequisites: List[_prerequisiteCallback] = ...
    def prerequisite(
        self,
        providesComponents: Sequence[Type[Interface]],
        requiresComponents: Sequence[Type[Interface]] = ...,
    ) -> Callable[[Callable], Callable]:
        """
        Specify a component that is a pre-requisite of every request routed
        through this requirer's C{require} method.  Used like so::

            requirer = Requirer()

            @requirer.prerequisite([IFoo])
            @inlineCallbacks
            def fooForRequest(request):
                request.setComponent(IFoo, someFooComponent)

        @note: C{requiresComponents} is, at this point, for the reader's
            interest only, the framework will not topologically sort
            dependencies; you must presently register prerequisites in the
            order you want them to be called.
        """
        ...
    def require(
        self, routeDecorator: _routeT, **requiredParameters: IRequiredParameter
    ) -> _routeDecorator:
        """
        Inject the given dependencies while running the given route.
        """
        ...
